/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sistema;

import datos.DBcontrolador;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileOutputStream;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.Principal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.table.DefaultTableModel;
import negocio.Producto;
import funciones.n2t;
import java.util.Properties;
import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;


/**
 *
 * @author JAMS
 */
public class Movimientos extends javax.swing.JFrame {

    public int idproveedor;
    public String nombreproveedor;
    public String correo;
    
    public int columnaopp;
    
    public Producto pro ;
    public String moneda;
    public int idmoneda;
    public int idmoneda2;
    public int idcliente;
    public String nombrecliente;
    public int columnaopc;
    
    private  DBcontrolador dbc;
    private Connection cnx;
    
    
    ArrayList <Double> preciosopp = new ArrayList<>();
    
    //OPP
    private DefaultTableModel tabla;
    //Compra
    private DefaultTableModel tabla2;
    private DefaultTableModel tabla3;
    //OPC
    private DefaultTableModel tabla4;
    
    //pruebas
    private DefaultTableModel sensoriales;
    
    private DefaultTableModel micro;
    
    private DefaultTableModel fisico;
    
    
    //array para guardar parametros
    private ArrayList <String[]> se = new ArrayList<>();
    private ArrayList <String[]> mi = new ArrayList<>();
    private ArrayList <String[]> fi = new ArrayList<>();
    
    private String s;
    
   
    private Menu_Principal mp ;
    
    /**
     * Creates new form Movimientos
     */
    public Movimientos(Menu_Principal mp, DBcontrolador dbc) throws SQLException {
        initComponents();
        this.mp=mp;
        
        this.pro= new Producto();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        this.tabla=(DefaultTableModel) this.tbproductosopp.getModel();
        this.tabla2=(DefaultTableModel) this.tbproductosopp1.getModel();
        this.tabla3=(DefaultTableModel) this.tbproductosopp2.getModel();
        this.tabla4=(DefaultTableModel) this.tbopc.getModel();
        this.sensoriales=(DefaultTableModel) this.tbliberacionsensoriales.getModel();
        this.micro=(DefaultTableModel) this.tblieracionmicrobiologicas.getModel();
        this.fisico=(DefaultTableModel) this.tblieracionfisicoquimicas.getModel();
        this.dbc = dbc;
        if (this.dbc.getCnx()==null) {
                this.dbc.conex();
            }
        combo();
        Path c = Paths.get("");
        s = c.toAbsolutePath().toString();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * W ARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        OPP = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        txtidordenproveedores = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        txtidproveedor = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        txtnombreproveedor = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        btnElegir = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbproductosopp = new javax.swing.JTable();
        btnAgregarpro = new javax.swing.JButton();
        btnquitarpro = new javax.swing.JButton();
        txtfecha = new javax.swing.JTextField();
        btnaceptaropp = new javax.swing.JButton();
        jLabel43 = new javax.swing.JLabel();
        cbcondicion_pago = new javax.swing.JComboBox<>();
        jLabel55 = new javax.swing.JLabel();
        Compra = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        txtidproveedor1 = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        txtnombreproveedor1 = new javax.swing.JTextField();
        jLabel52 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbproductosopp1 = new javax.swing.JTable();
        btnAgregarproc = new javax.swing.JButton();
        btnquitarproc = new javax.swing.JButton();
        txtfecha1 = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        btnaceptarc = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbproductosopp2 = new javax.swing.JTable();
        cbopp = new javax.swing.JComboBox<>();
        cbproductosc = new javax.swing.JComboBox<>();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        txtcantidadcompra = new javax.swing.JTextField();
        txtcapacidadcompra = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        txtfechaentrada = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        txtlotecompra = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        txtfactno = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        txtcaducidad = new javax.swing.JTextField();
        OPC = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        txtidopc = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        txtidclienteopc = new javax.swing.JTextField();
        jLabel49 = new javax.swing.JLabel();
        txtnombrecliente = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        btnElegir1 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbopc = new javax.swing.JTable();
        btnAgregarpro1 = new javax.swing.JButton();
        btnquitarpro1 = new javax.swing.JButton();
        txtfechaopc = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        btnaceptaropp1 = new javax.swing.JButton();
        LOP = new javax.swing.JPanel();
        cbodp = new javax.swing.JComboBox<>();
        jLabel44 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbliberacionsensoriales = new javax.swing.JTable();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblieracionmicrobiologicas = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblieracionfisicoquimicas = new javax.swing.JTable();
        jLabel21 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        txtfechaliberacion = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        txtcomentarios = new javax.swing.JTextArea();
        btnaceptar = new javax.swing.JButton();
        jLabel50 = new javax.swing.JLabel();
        txtproductoliberacion = new javax.swing.JTextField();
        jLabel54 = new javax.swing.JLabel();
        txtproductoidliberacion = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(162, 127, 51));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));

        OPP.setBackground(new java.awt.Color(255, 255, 255));
        OPP.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel14.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel14.setText("Orden de Pedido a Proveedores");
        OPP.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 0, -1, 39));

        txtidordenproveedores.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtidordenproveedores.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtidordenproveedores.setEnabled(false);
        OPP.add(txtidordenproveedores, new org.netbeans.lib.awtextra.AbsoluteConstraints(151, 45, 118, -1));

        jLabel31.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel31.setText("ID Orden :");
        OPP.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(78, 48, -1, -1));

        txtidproveedor.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtidproveedor.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtidproveedor.setEnabled(false);
        OPP.add(txtidproveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(151, 72, 118, -1));

        jLabel47.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel47.setText("ID Proveedor :");
        OPP.add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(56, 75, -1, -1));

        txtnombreproveedor.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtnombreproveedor.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtnombreproveedor.setEnabled(false);
        OPP.add(txtnombreproveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(151, 103, 450, -1));

        jLabel51.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel51.setText("Nombre :");
        OPP.add(jLabel51, new org.netbeans.lib.awtextra.AbsoluteConstraints(82, 106, -1, -1));

        btnElegir.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnElegir.setText("Elegir");
        btnElegir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnElegirActionPerformed(evt);
            }
        });
        OPP.add(btnElegir, new org.netbeans.lib.awtextra.AbsoluteConstraints(471, 72, 130, -1));

        tbproductosopp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Clave", "Nombre", "U. Medida", "Cantidad", "Moneda", "P. Unitario", "P. Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbproductosopp.getTableHeader().setReorderingAllowed(false);
        tbproductosopp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbproductosoppMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbproductosopp);
        if (tbproductosopp.getColumnModel().getColumnCount() > 0) {
            tbproductosopp.getColumnModel().getColumn(5).setHeaderValue("Moneda");
            tbproductosopp.getColumnModel().getColumn(6).setHeaderValue("P. Unitario");
            tbproductosopp.getColumnModel().getColumn(7).setHeaderValue("P. Total");
        }

        OPP.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 1240, 230));

        btnAgregarpro.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnAgregarpro.setText("Agregar Producto");
        btnAgregarpro.setEnabled(false);
        btnAgregarpro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarproActionPerformed(evt);
            }
        });
        OPP.add(btnAgregarpro, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 420, -1, -1));

        btnquitarpro.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnquitarpro.setText("Quitar Producto");
        btnquitarpro.setEnabled(false);
        btnquitarpro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnquitarproActionPerformed(evt);
            }
        });
        OPP.add(btnquitarpro, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 420, 160, -1));

        txtfecha.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtfecha.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        OPP.add(txtfecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 40, 190, -1));

        btnaceptaropp.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnaceptaropp.setText("Aceptar");
        btnaceptaropp.setEnabled(false);
        btnaceptaropp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaceptaroppActionPerformed(evt);
            }
        });
        OPP.add(btnaceptaropp, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 420, 210, -1));

        jLabel43.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel43.setText("Condicion de pago:");
        OPP.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 80, -1, -1));

        OPP.add(cbcondicion_pago, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 80, 130, 20));

        jLabel55.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel55.setText("Fecha:");
        OPP.add(jLabel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 40, -1, -1));

        jTabbedPane1.addTab("Orden de Pedido a Proveedores", OPP);

        Compra.setBackground(new java.awt.Color(255, 255, 255));
        Compra.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel15.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel15.setText("Registro de Compra");
        Compra.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 0, -1, 39));

        jLabel33.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel33.setText("ID Orden :");
        Compra.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 40, -1, -1));

        txtidproveedor1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtidproveedor1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtidproveedor1.setEnabled(false);
        Compra.add(txtidproveedor1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 70, 118, -1));

        jLabel48.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel48.setText("ID Proveedor :");
        Compra.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 70, -1, -1));

        txtnombreproveedor1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtnombreproveedor1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtnombreproveedor1.setEnabled(false);
        Compra.add(txtnombreproveedor1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 100, 410, -1));

        jLabel52.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel52.setText("Nombre :");
        Compra.add(jLabel52, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, -1, -1));

        tbproductosopp1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Clave", "Cantidad", "P. Unitario"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbproductosopp1.setEnabled(false);
        tbproductosopp1.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tbproductosopp1);
        if (tbproductosopp1.getColumnModel().getColumnCount() > 0) {
            tbproductosopp1.getColumnModel().getColumn(0).setPreferredWidth(30);
            tbproductosopp1.getColumnModel().getColumn(1).setPreferredWidth(230);
            tbproductosopp1.getColumnModel().getColumn(2).setPreferredWidth(50);
            tbproductosopp1.getColumnModel().getColumn(3).setPreferredWidth(50);
            tbproductosopp1.getColumnModel().getColumn(4).setPreferredWidth(100);
        }

        Compra.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 610, 230));

        btnAgregarproc.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnAgregarproc.setText("Agregar Producto");
        btnAgregarproc.setEnabled(false);
        btnAgregarproc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarprocActionPerformed(evt);
            }
        });
        Compra.add(btnAgregarproc, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 410, -1, -1));

        btnquitarproc.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnquitarproc.setText("Quitar Producto");
        btnquitarproc.setEnabled(false);
        btnquitarproc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnquitarprocActionPerformed(evt);
            }
        });
        Compra.add(btnquitarproc, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 410, -1, -1));

        txtfecha1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtfecha1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtfecha1.setEnabled(false);
        Compra.add(txtfecha1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 40, 121, -1));

        jLabel34.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel34.setText("Fecha Pedido:");
        Compra.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 40, -1, -1));

        btnaceptarc.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnaceptarc.setText("Aceptar");
        btnaceptarc.setEnabled(false);
        btnaceptarc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaceptarcActionPerformed(evt);
            }
        });
        Compra.add(btnaceptarc, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 450, 107, -1));

        tbproductosopp2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Capacidad", "Lote", "Costo", "Caducidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbproductosopp2.getTableHeader().setReorderingAllowed(false);
        tbproductosopp2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbproductosopp2MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tbproductosopp2);
        if (tbproductosopp2.getColumnModel().getColumnCount() > 0) {
            tbproductosopp2.getColumnModel().getColumn(0).setPreferredWidth(30);
            tbproductosopp2.getColumnModel().getColumn(1).setPreferredWidth(230);
            tbproductosopp2.getColumnModel().getColumn(2).setPreferredWidth(100);
            tbproductosopp2.getColumnModel().getColumn(3).setPreferredWidth(100);
            tbproductosopp2.getColumnModel().getColumn(4).setPreferredWidth(100);
            tbproductosopp2.getColumnModel().getColumn(5).setPreferredWidth(100);
        }

        Compra.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 150, 590, 230));

        cbopp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboppActionPerformed(evt);
            }
        });
        Compra.add(cbopp, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 40, 118, -1));

        Compra.add(cbproductosc, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 410, 170, -1));

        jLabel35.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel35.setText("Producto :");
        Compra.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 390, -1, -1));

        jLabel36.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel36.setText("Cantidad :");
        Compra.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 390, -1, -1));

        jLabel37.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel37.setText("Capacidad:");
        Compra.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 390, -1, -1));

        txtcantidadcompra.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtcantidadcompra.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtcantidadcompra.setEnabled(false);
        Compra.add(txtcantidadcompra, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 410, 121, -1));

        txtcapacidadcompra.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtcapacidadcompra.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtcapacidadcompra.setEnabled(false);
        Compra.add(txtcapacidadcompra, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 410, 121, -1));

        jLabel38.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel38.setText("Lote :");
        Compra.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 60, -1, -1));

        txtfechaentrada.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtfechaentrada.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtfechaentrada.setEnabled(false);
        Compra.add(txtfechaentrada, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 30, 160, -1));

        jLabel39.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel39.setText("Fecha  Entrada:");
        Compra.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 30, -1, -1));

        txtlotecompra.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtlotecompra.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtlotecompra.setEnabled(false);
        Compra.add(txtlotecompra, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 60, 160, -1));

        jLabel40.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel40.setText("No Factura :");
        Compra.add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 90, -1, -1));

        txtfactno.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtfactno.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtfactno.setEnabled(false);
        Compra.add(txtfactno, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 90, 160, -1));

        jLabel45.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel45.setText("Caducidad :");
        Compra.add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 120, -1, -1));

        txtcaducidad.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtcaducidad.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtcaducidad.setEnabled(false);
        Compra.add(txtcaducidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 120, 160, -1));

        jTabbedPane1.addTab("Registro de Compra", Compra);

        OPC.setBackground(new java.awt.Color(255, 255, 255));
        OPC.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel16.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel16.setText("Orden de Pedido a Clientes");
        OPC.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(346, 0, -1, 39));

        txtidopc.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtidopc.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtidopc.setEnabled(false);
        OPC.add(txtidopc, new org.netbeans.lib.awtextra.AbsoluteConstraints(134, 45, 118, -1));

        jLabel41.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel41.setText("ID Orden :");
        OPC.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 48, -1, -1));

        txtidclienteopc.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtidclienteopc.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtidclienteopc.setEnabled(false);
        OPC.add(txtidclienteopc, new org.netbeans.lib.awtextra.AbsoluteConstraints(134, 72, 118, -1));

        jLabel49.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel49.setText("ID Cliente :");
        OPC.add(jLabel49, new org.netbeans.lib.awtextra.AbsoluteConstraints(56, 75, -1, -1));

        txtnombrecliente.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtnombrecliente.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtnombrecliente.setEnabled(false);
        OPC.add(txtnombrecliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(134, 103, 460, -1));

        jLabel53.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel53.setText("Nombre :");
        OPC.add(jLabel53, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 106, -1, -1));

        btnElegir1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnElegir1.setText("Elegir");
        btnElegir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnElegir1ActionPerformed(evt);
            }
        });
        OPC.add(btnElegir1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 70, 140, -1));

        tbopc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Clave", "Nombre", "U. Medida", "Cantidad", "No. Orden Cliente"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbopc.getTableHeader().setReorderingAllowed(false);
        tbopc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbopcMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tbopc);
        if (tbopc.getColumnModel().getColumnCount() > 0) {
            tbopc.getColumnModel().getColumn(0).setPreferredWidth(30);
            tbopc.getColumnModel().getColumn(1).setPreferredWidth(70);
            tbopc.getColumnModel().getColumn(2).setPreferredWidth(250);
            tbopc.getColumnModel().getColumn(3).setPreferredWidth(50);
            tbopc.getColumnModel().getColumn(4).setPreferredWidth(100);
            tbopc.getColumnModel().getColumn(5).setPreferredWidth(150);
        }

        OPC.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, 1230, 250));

        btnAgregarpro1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnAgregarpro1.setText("Agregar Producto");
        btnAgregarpro1.setEnabled(false);
        btnAgregarpro1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarpro1ActionPerformed(evt);
            }
        });
        OPC.add(btnAgregarpro1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 430, -1, -1));

        btnquitarpro1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnquitarpro1.setText("Quitar Producto");
        btnquitarpro1.setEnabled(false);
        btnquitarpro1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnquitarpro1ActionPerformed(evt);
            }
        });
        OPC.add(btnquitarpro1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 430, 160, -1));

        txtfechaopc.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtfechaopc.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtfechaopc.setEnabled(false);
        OPC.add(txtfechaopc, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 40, 170, -1));

        jLabel42.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel42.setText("Fecha:");
        OPC.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 40, -1, -1));

        btnaceptaropp1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnaceptaropp1.setText("Aceptar");
        btnaceptaropp1.setEnabled(false);
        btnaceptaropp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaceptaropp1ActionPerformed(evt);
            }
        });
        OPC.add(btnaceptaropp1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 430, 107, -1));

        jTabbedPane1.addTab("Orden de Pedido a Clientes", OPC);

        LOP.setBackground(new java.awt.Color(255, 255, 255));
        LOP.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cbodp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbodpActionPerformed(evt);
            }
        });
        LOP.add(cbodp, new org.netbeans.lib.awtextra.AbsoluteConstraints(164, 36, 190, -1));

        jLabel44.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel44.setText("No. Orden Produccion :");
        LOP.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(27, 38, -1, -1));

        jLabel18.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel18.setText("Liberacion");
        LOP.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 0, -1, 39));

        jLabel19.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel19.setText("Fisicoquimicas");
        LOP.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 100, -1, -1));

        tbliberacionsensoriales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Determinacion", "Resultado", "Metodo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbliberacionsensoriales);

        LOP.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(27, 131, 580, 150));

        jLabel20.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel20.setText("Sensoriales");
        LOP.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 100, -1, -1));

        tblieracionmicrobiologicas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Determinacion", "Resultado", "Metodo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tblieracionmicrobiologicas);

        LOP.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 590, 150));

        tblieracionfisicoquimicas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Determinacion", "Resultado", "Metodo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(tblieracionfisicoquimicas);

        LOP.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 130, 600, 150));

        jLabel21.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel21.setText("Comentarios");
        LOP.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 290, -1, -1));

        jLabel46.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel46.setText("Fecha :");
        LOP.add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(114, 69, -1, -1));

        txtfechaliberacion.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtfechaliberacion.setEnabled(false);
        LOP.add(txtfechaliberacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(164, 67, 190, -1));

        jLabel22.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel22.setText("Microbiologicas");
        LOP.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 290, -1, -1));

        txtcomentarios.setColumns(20);
        txtcomentarios.setRows(5);
        jScrollPane8.setViewportView(txtcomentarios);

        LOP.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 320, 600, 120));

        btnaceptar.setText("Aceptar");
        btnaceptar.setEnabled(false);
        btnaceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaceptarActionPerformed(evt);
            }
        });
        LOP.add(btnaceptar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 450, 130, -1));

        jLabel50.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel50.setText("Producto :");
        LOP.add(jLabel50, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 70, -1, -1));

        txtproductoliberacion.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtproductoliberacion.setEnabled(false);
        LOP.add(txtproductoliberacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 70, 480, -1));

        jLabel54.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel54.setText("ID Producto :");
        LOP.add(jLabel54, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 40, -1, -1));

        txtproductoidliberacion.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtproductoidliberacion.setEnabled(false);
        LOP.add(txtproductoidliberacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 40, 92, -1));

        jTabbedPane1.addTab("Liberacion O. Produccion", LOP);

        jPanel4.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 56, 1290, 520));

        jLabel13.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel13.setText("Movimientos");
        jPanel4.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 10, -1, 39));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    //cambiar formato de fecha
    public String fechadividir(JTextField  jt, int i ){
        String fi ="";
        if (i == 0) {
            String[] s = jt.getText().split("-");
            fi = s[2]+"/"+s[1]+"/"+s[0];       
        }
        else
        {
            String[] s = jt.getText().split("/");
            fi = s[2]+"-"+s[1]+"-"+s[0]; 
        }
        return fi;
    }
    
    public String fechadividir(String  jt, int i ){
        String fi ="";
        if (i == 0) {
            String[] s = jt.split("-");
            fi = s[2]+"/"+s[1]+"/"+s[0];       
        }
        else
        {
            String[] s = jt.split("/");
            fi = s[2]+"-"+s[1]+"-"+s[0]; 
        }
        return fi;
    }
    
    //Orden de perdido a proveedores
    
    public void colocarproveedor()
    {
        
        this.txtidproveedor.setText(this.idproveedor + "");
        this.txtnombreproveedor.setText(this.nombreproveedor);
        
        LocalDateTime ahora = LocalDateTime.now(); 
       
        this.txtfecha.setText(ahora.getDayOfMonth()+"/"+ ahora.getMonthValue() +"/" + ahora.getYear() );
        
        
        
        String query="Select MAX(id) from opproveedores";
        int maxid;
        if(this.dbc.seleccionarid(query)==null)
        maxid=1;
        else
        maxid=Integer.parseInt(this.dbc.seleccionarid(query))+1;
        
        this.txtidordenproveedores.setText(maxid + "");
        
        this.btnAgregarpro.setEnabled(true);
        this.btnquitarpro.setEnabled(true);
        
    }
    
    public void colocarcliente()
    {
        
        this.txtidclienteopc.setText(this.idcliente + "");
        this.txtnombrecliente.setText(this.nombrecliente);
        
        LocalDateTime ahora = LocalDateTime.now(); 
       
        this.txtfechaopc.setText(ahora.getDayOfMonth()+"/"+ ahora.getMonthValue() +"/" + ahora.getYear() );
        this.txtfechaopc.setEnabled(true);
        
        
        String query="Select MAX(id) from opclientes";
        int maxid;
        if(this.dbc.seleccionarid(query)==null)
        maxid=1;
        else
        maxid=Integer.parseInt(this.dbc.seleccionarid(query)+1);
        
        this.txtidopc.setText(maxid + "");
        
       
        
        this.btnAgregarpro1.setEnabled(true);
        this.btnquitarpro1.setEnabled(true);
        
    }
    
    public void colocarproducto()
    {
        
        String[] s = new String[8]; 
        s[1]=this.pro.getClave();
        s[0]=this.pro.getId()+"";
        s[2]=this.pro.getNombre();
        s[3]=this.pro.getMedida();
        s[4]=this.pro.getStockmin()+"";
        s[5]=this.moneda;
        s[6]=this.pro.getPventa()+"";      
        s[7]=(Math.round( (this.pro.getPventa()*this.pro.getStockmin())* 100.0 ) / 100.0)+"";
        
        boolean x=true;
        for (int i = 0; i < this.tabla.getRowCount(); i++) {
            int id = Integer.parseInt(this.tabla.getValueAt(i, 0).toString());
            if (id == Integer.parseInt(s[0])) {
                x=false;
            }            
        }
        if (x) {
            this.tabla.addRow(s);
            this.preciosopp.add(Math.round( (this.pro.getPventa()*this.pro.getStockmin())* 100.0 ) / 100.0);
            this.btnquitarpro.setEnabled(true);
            this.btnaceptaropp.setEnabled(true);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "El producto ya esta seleccionado");
        }
        

    }
    
     public void colocarproductoopc()
    {
        
        String[] s = new String[5]; 
        s[1]=this.pro.getClave();
        s[0]=this.pro.getId()+"";
        s[2]=this.pro.getNombre();
        s[3]=this.pro.getMedida();
        s[4]=this.pro.getStockmin()+"";
        
        boolean x=true;
        for (int i = 0; i < this.tabla4.getRowCount(); i++) {
            int id = Integer.parseInt(this.tabla4.getValueAt(i, 0).toString());
            if (id == Integer.parseInt(s[0])) {
                x=false;
            }            
        }
         
        if (x) {
            this.tabla4.addRow(s);
            this.btnquitarpro1.setEnabled(true);
            this.btnaceptaropp1.setEnabled(true);

        }
        else
        {
            JOptionPane.showMessageDialog(null, "El producto ya esta seleccionado");
        }
        
    }
    
    public void combo()
    {
        this.cbopp.removeAllItems();
        String query="select opproveedores.id ,  proveedores.nombre from opproveedores\n" +
                    "join proveedores on proveedores.id = opproveedores.idpro where idestatus = 1";
        ArrayList <String[]> op = new ArrayList<>();
        
        op=this.dbc.seleccionar(query);
        for (int i = 0; i < op.size(); i++) {
            this.cbopp.addItem(op.get(i)[0]+ " " + op.get(i)[1]);
        }
        
        this.cbodp.removeAllItems();
        query="SELECT id FROM ordenes_prod where estatus = 1";
        op.clear();
        
        op=this.dbc.seleccionar(query);
        for (int i = 0; i < op.size(); i++) {
            this.cbodp.addItem(op.get(i)[0]);
        }
        
        op.clear();
        query="SELECT nombre FROM condicion_pago ";
        op=this.dbc.seleccionar(query);
        for (int i = 0; i < op.size(); i++) {
            this.cbcondicion_pago.addItem(op.get(i)[0]);
        }
    }
    
    //cierra
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
       this.setVisible(false);
       this.mp.notificaciones();
       this.mp.setVisible(true);
       this.dispose();
    }//GEN-LAST:event_formWindowClosing

    
    
    private void cbodpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbodpActionPerformed
        
        comboliberacion();
 
    }//GEN-LAST:event_cbodpActionPerformed

    public void comboliberacion()
    {
        try{
            this.sensoriales.setRowCount(0);
            this.micro.setRowCount(0);
            this.fisico.setRowCount(0);

            String idodp= this.cbodp.getSelectedItem().toString();
            String query = "select ordenes_prod.id, ordenes_prod.idproduc, productos.nombre, ordenes_prod.fecha from ordenes_prod \n" +
                           "join productos on ordenes_prod.idproduc = productos.id  where  ordenes_prod.id = "+ idodp;
            ArrayList <String[]> op = new ArrayList<>();
            op= this.dbc.seleccionar(query);
            this.txtfechaliberacion.setText(fechadividir(op.get(0)[3],0));
            this.txtproductoidliberacion.setText(op.get(0)[1]);
            this.txtproductoliberacion.setText(op.get(0)[2]);

            query="select * from pruebas where idproducto =  "+this.txtproductoidliberacion.getText();
            op.clear();
            this.se.clear();
            this.mi.clear();
            this.fi.clear();

            op=this.dbc.seleccionar(query);
            for (int i = 0; i < op.size(); i++) {
                if (op.get(i)[2].compareTo("1")==0) {
                    String[] s = new String[3];
                    s[0]=op.get(i)[3];
                    s[1]="";
                    s[2]=op.get(i)[5];
                    this.se.add(op.get(i));
                    this.sensoriales.addRow(s);
                }
                else
                {
                    if (op.get(i)[2].compareTo("3")==0) {
                        String[] s = new String[3];
                        s[0]=op.get(i)[3];
                        s[1]="";
                        s[2]=op.get(i)[5];
                        this.micro.addRow(s);
                        this.mi.add(op.get(i));
                    }
                    else
                    {
                        if (op.get(i)[2].compareTo("2")==0) {
                            String[] s = new String[3];
                            s[0]=op.get(i)[3];
                            s[1]="";
                            s[2]=op.get(i)[5];
                            this.fisico.addRow(s);
                            this.fi.add(op.get(i));
                        }

                    }
                }
            }
            
            this.txtfechaliberacion.setEnabled(true);
            this.btnaceptar.setEnabled(true);
        }
        catch(Exception ex )
        {
            System.out.println("Error combo "+ ex);
            
        }
        
    }
    
    private void btnaceptaropp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaceptaropp1ActionPerformed
        try{
            if (this.txtfechaopc.getText().matches("^[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{4}$") && this.tbopc.getRowCount() > 0) {
                String query;
                String ingrefaltante="";
                ArrayList <String[]> op = new ArrayList<>();
                ArrayList <String[]> op2 = new ArrayList<>();
                boolean sipasa=true;
                //validacion
                for (int i = 0; i < this.tabla4.getRowCount(); i++) {
                    query="select idproducto, cantidad from ingredientes where idproductofinal= " + this.tabla4.getValueAt(i, 0).toString();
                    op= this.dbc.seleccionar(query);
                    for (int j = 0; j < op.size(); j++) {
                        query="select sum(inventario.cantidadactual), productos.nombre from inventario join productos on productos.id = inventario.idproducto where fechacaducidad >= '"+this.fechadividir(txtfechaopc, 2) +"' and idproducto = "+ op.get(j)[0];
                        op2=this.dbc.seleccionar(query);
                        if (op2.get(0)[0]== null) {
                            ingrefaltante += "Requiere "+Double.parseDouble(this.tabla4.getValueAt(i, 4).toString())* Double.parseDouble(op.get(j)[1])  +" de "+op2.get(0)[1] +"\n";
                            sipasa=false;
                        }
                        else
                        {
                            if (Double.parseDouble(op2.get(0)[0]) < Double.parseDouble(op.get(j)[1]) *  Double.parseDouble(this.tabla4.getValueAt(i, 4).toString())) {
                            sipasa=false;
                            double falta = Double.parseDouble(op.get(j)[1]) *  Double.parseDouble(this.tabla4.getValueAt(i, 4).toString()) - Double.parseDouble(op2.get(0)[0]);
                            ingrefaltante += "Requiere "+falta+" de "+op2.get(0)[1] +"\n";
                            }
                        }
                       

                    }
                    op.clear();
                }
                boolean ordencliente=true;
                for (int i = 0; i < this.tabla4.getRowCount(); i++) {
                    if (this.tabla4.getValueAt(i, 5) == null) {
                        ordencliente=false;
                    }
                }

                if (sipasa) {
                    if (ordencliente) {
                        double preciototal=0;
                        for (int i = 0; i < this.tabla4.getRowCount(); i++) {
                            System.out.println(i);
                            query="Select pventa from productos where id = "+ this.tabla4.getValueAt(i, 0).toString();
                            op=this.dbc.seleccionar(query);
                            preciototal+=Double.parseDouble(op.get(0)[0])* Double.parseDouble(this.tabla4.getValueAt(i, 4).toString());
                            op.clear();
                        }

                        query="Insert into opclientes(idcliente,ptotal, fecha) values (?,?,?)";
                        PreparedStatement ps= this.dbc.getCnx().prepareStatement(query);

                        ps.setInt(1, Integer.parseInt(this.txtidclienteopc.getText()) );

                        ps.setDouble(2, preciototal );

                        ps.setString(3, this.fechadividir(txtfechaopc, 2));

                        ps.executeUpdate();
                        ps.close();

                        query = "select MAX(id) from opclientes";

                        int index = Integer.parseInt(this.dbc.seleccionarid(query) );

                        query ="Insert into pedidos_opc(idopc,idproducto,cantidad,noordencliente) values (?,?,?,?)";

                        for (int i = 0; i < this.tabla4.getRowCount(); i++) {

                            ps= this.dbc.getCnx().prepareStatement(query);
                            ps.setDouble(1, index);
                            ps.setInt(2, Integer.parseInt(this.tabla4.getValueAt(i, 0).toString()));
                            ps.setDouble(3, Double.parseDouble(this.tabla4.getValueAt(i, 4).toString()));
                            ps.setString(4, this.tabla4.getValueAt(i, 5).toString());
                            ps.executeUpdate();
                            ps.close();
                        }

                        //crearodernproduccion
                        for (int i = 0; i < this.tabla4.getRowCount(); i++) {
                            query ="Insert into ordenes_prod(idopc,idproduc,fecha,cantidad) values (?,?,?,?)";
                            ps = this.dbc.getCnx().prepareStatement(query);
                            ps.setDouble(1, index);
                            ps.setInt(2, Integer.parseInt(this.tabla4.getValueAt(i, 0).toString()));
                            ps.setString(3, this.fechadividir(txtfechaopc, 2));
                            ps.setDouble(4, Double.parseDouble(this.tabla4.getValueAt(i, 4).toString()));
                            ps.executeUpdate();
                            ps.close();
                            query = "select MAX(id) from ordenes_prod";

                            int indexodp = Integer.parseInt(this.dbc.seleccionarid(query) );

                            //inventario e ingredientes

                            double cantidad=Double.parseDouble(this.tabla4.getValueAt(i, 4).toString());
                            ArrayList <String[]> op1 = new ArrayList<>();
                            query="select * from ingredientes where idproductofinal = "+ this.tabla4.getValueAt(i, 0).toString();
                            op=this.dbc.seleccionar(query);
                            for (int j = 0; j < op.size(); j++) {

                                query="select * from inventario where idproducto = "+op.get(j)[2] +" and cantidadactual > 0 and fechacaducidad >= '"+this.fechadividir(txtfechaopc, 2)+"'";
                                op1=this.dbc.seleccionar(query);
                                double cantidad2=cantidad * Double.parseDouble(op.get(j)[3]);
                                for (int k = 0; k < op1.size(); k++) {

                                    if (cantidad2 != 0) {

                                        double aux =Double.parseDouble(op1.get(k)[3]) - cantidad2;
                                        if (aux >= 0) {
                                            query="insert into mp_odp (idodp,idinven,cantidad,costo) values (?,?,?,?)";
                                            ps= this.dbc.getCnx().prepareStatement(query);
                                            ps.setDouble(1, indexodp);
                                            ps.setInt(2, Integer.parseInt(op1.get(k)[0]));
                                            ps.setDouble(3, cantidad2);
                                            double costo =Double.parseDouble(op1.get(k)[8])/Double.parseDouble(op1.get(k)[7]) * cantidad2;
                                            ps.setDouble(4, costo);
                                            ps.executeUpdate();
                                            ps.close();

                                            query="update inventario set cantidadactual = ? where id = ? ";
                                            ps= this.dbc.getCnx().prepareStatement(query);
                                            ps.setDouble(1, aux);
                                            ps.setInt(2, Integer.parseInt(op1.get(k)[0]));
                                            ps.executeUpdate();
                                            ps.close();

                                            cantidad2=0;
                                        }
                                        else
                                        {
                                            query="insert into mp_odp (idodp,idinven,cantidad,costo) values (?,?,?,?)";
                                            ps= this.dbc.getCnx().prepareStatement(query);
                                            ps.setDouble(1, indexodp);
                                            ps.setInt(2, Integer.parseInt(op1.get(k)[0]));
                                            ps.setDouble(3, Double.parseDouble(op1.get(k)[3]));
                                            double costo =Double.parseDouble(op1.get(k)[8])/Double.parseDouble(op1.get(k)[7]) * Double.parseDouble(op1.get(k)[3]);
                                            ps.setDouble(4, costo);
                                            ps.executeUpdate();
                                            ps.close();

                                            query="update inventario set cantidadactual = ? where id = ?";
                                            ps= this.dbc.getCnx().prepareStatement(query);
                                            ps.setDouble(1, 0);
                                            ps.setInt(2, Integer.parseInt(op1.get(k)[0]));
                                            ps.executeUpdate();
                                            ps.close();

                                            cantidad2=cantidad2-Double.parseDouble(op1.get(k)[3]);
                                        }

                                    }
                                    
                                }
                                
                                op1.clear();

                            }
                             //reporte 
                            JasperReport reporte; //Creo el objeto reporte
                            // Ubicacion del Reporte
                           String path = s+"\\Reportes\\ODP.jasper";
                           try {
                               
                               reporte = (JasperReport) JRLoader.loadObjectFromFile(path); //Cargo el reporte al objeto
                               Map idodp = new HashMap();
                               idodp.put("ID_ODP", indexodp);
                               JasperPrint jprint = JasperFillManager.fillReport(path, idodp, this.dbc.getCnx()); //Llenado del Reporte con Tres parametros ubicacion,parametros,conexion a la base de datos
                               File d = new File(s+"\\ODP");
                               File pdf = File.createTempFile("ODP-"+indexodp+"---", ".pdf",d);
                               JasperExportManager.exportReportToPdfStream(jprint, new FileOutputStream(pdf));
                               JasperViewer viewer = new JasperViewer(jprint,false); //Creamos la vista del Reporte
                               viewer.setDefaultCloseOperation(DISPOSE_ON_CLOSE); // Le agregamos que se cierre solo el reporte cuando lo cierre el usuario
                               viewer.setVisible(true); //Inicializamos la vista del Reporte
                               
                           } catch (Exception ex) {
                               Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                           }

                        }

                        this.btnAgregarpro1.setEnabled(false);
                        this.btnquitarpro1.setEnabled(false);
                        this.btnaceptaropp1.setEnabled(false);

                        this.txtidclienteopc.setText("");
                        this.txtfechaopc.setText("");
                        this.txtnombrecliente.setText("");
                        this.txtidopc.setText("");

                        this.tabla4.setRowCount(0);
                        combo();

                       

                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "Alguna Orden de cliente esta vacia", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, ingrefaltante, "Error: Faltan Ingredientes", JOptionPane.ERROR_MESSAGE);
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Error en la fecha");
            }
            
        }
        catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(null, "Error de conexion, intente otra vez "+ ex);
            try {
                this.dbc = new DBcontrolador ();
            } catch (SQLException ex1) {
                Logger.getLogger(Movimientos.class.getName()).log(Level.SEVERE, null, ex1);
            }
           this.cnx=this.dbc.getCnx();
           
        }
    }//GEN-LAST:event_btnaceptaropp1ActionPerformed

    private void btnquitarpro1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnquitarpro1ActionPerformed
        try
        {
            if (this.tabla4.getRowCount() >0 ) {
                this.tabla4.removeRow(this.columnaopp);
            }

        }
        catch(Exception ex)
        {
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_btnquitarpro1ActionPerformed

    private void btnAgregarpro1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarpro1ActionPerformed
        try
        {
            Elegir_ProductoOPP productos = new Elegir_ProductoOPP (this,2);
            this.setEnabled(false);
            productos.setVisible(true);

        }
        catch(Exception ex)
        {
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_btnAgregarpro1ActionPerformed

    private void tbopcMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbopcMouseClicked
        try
        {
            this.columnaopc=this.tbopc.getSelectedRow();
        }
        catch(Exception ex)
        {

        }
    }//GEN-LAST:event_tbopcMouseClicked

    private void btnElegir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnElegir1ActionPerformed
        try {
            Elegir_Proveedor pro = new Elegir_Proveedor(this,2);
            pro.setVisible(true);
            this.setEnabled(false);

        } catch (SQLException ex) {
            Logger.getLogger(Datos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnElegir1ActionPerformed

    private void cboppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboppActionPerformed
        try{
            this.cbproductosc.removeAllItems();
            String[] id = this.cbopp.getSelectedItem().toString().split(" ");
            String query ="select pedidos_opp.idpro, productos.nombre, productos.clave, pedidos_opp.cantidad, pedidos_opp.punitario from pedidos_opp\n" +
            " join productos on productos.id = pedidos_opp.idpro where pedidos_opp.idopp = "+ id[0];
            ArrayList <String[]> op = new ArrayList<>();
            op=this.dbc.seleccionar(query);
            this.tabla2.setRowCount(0);

            for (int i = 0; i < op.size(); i++) {
                this.tabla2.addRow(op.get(i));
                this.cbproductosc.addItem(op.get(i)[1]);

            }
            this.idmoneda2=Integer.parseInt(this.dbc.seleccionarid("select idmoneda from opproveedores where id = "+id[0]));
            op.clear();
            query="select proveedores.id  ,  proveedores.nombre , opproveedores.fecha from opproveedores\n" +
            " join proveedores on proveedores.id = opproveedores.idpro where opproveedores.id =" + id[0];
            op=this.dbc.seleccionar(query);
            this.txtidproveedor1.setText(op.get(0)[0]);
            this.txtnombreproveedor1.setText(op.get(0)[1]);

            this.txtfecha1.setText(op.get(0)[2]);
            this.txtfecha1.setText(this.fechadividir(txtfecha1, 0));

            LocalDateTime ahora = LocalDateTime.now();
            this.txtfechaentrada.setText(ahora.getDayOfMonth()+"/"+ ahora.getMonthValue() +"/" + ahora.getYear());
            
            this.txtfecha1.setEnabled(true);
            this.txtfechaentrada.setEnabled(true);

            this.txtlotecompra.setEnabled(true);
            this.txtfactno.setEnabled(true);
            
            this.txtfechaentrada.setEnabled(true);

            this.cbproductosc.setEnabled(true);
            this.txtcantidadcompra.setEnabled(true);
            this.txtcapacidadcompra.setEnabled(true);
            
            this.txtcaducidad.setEnabled(true);

            this.btnAgregarproc.setEnabled(true);

        }
        catch(Exception ex)
        {

        }

    }//GEN-LAST:event_cboppActionPerformed

    private void tbproductosopp2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbproductosopp2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tbproductosopp2MouseClicked

    private void btnaceptarcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaceptarcActionPerformed
        try{
            boolean escero=true; 
            
            String noentrada="";
            
            for (int i = 0; i < this.tabla2.getRowCount(); i++) {
                double total=Double.parseDouble(this.tabla2.getValueAt(i, 3).toString());
                if (total != 0 ) {
                    escero=false;
                }
            }

            if (escero && this.txtfecha1.getText().matches("^[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{4}$") && this.txtfechaentrada.getText().matches("^[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{4}$")) {
                String  query ="Insert into inventario(idproducto,fechaentrada,cantidadactual,lote,idopp,facturano,cantidad,costo,fechacaducidad,idmoneda) values (?,?,?,?,?,?,?,?,?,?)";
                for (int i = 0; i < this.tabla3.getRowCount(); i++) {
                    PreparedStatement ps= this.dbc.getCnx().prepareStatement(query);
                    ps.setInt(1, Integer.parseInt(this.tabla3.getValueAt(i, 0).toString()));

                    ps.setString(2, fechadividir(this.txtfechaentrada,2));
                    ps.setDouble(3, Double.parseDouble(this.tabla3.getValueAt(i, 2).toString()));
                    ps.setString(4, this.tabla3.getValueAt(i, 3).toString());

                    String[] id = this.cbopp.getSelectedItem().toString().split(" ");
                    ps.setInt(5, Integer.parseInt(id[0]));
                    ps.setString(6, this.txtfactno.getText());
                    ps.setDouble(7, Double.parseDouble(this.tabla3.getValueAt(i, 2).toString()));
                    ps.setDouble(8, Double.parseDouble(this.tabla3.getValueAt(i, 4).toString()));
                    ps.setString(9, fechadividir(this.tabla3.getValueAt(i, 5).toString(),2));
                    //dinero
                    ps.setInt(10,this.idmoneda2);
                    ps.executeUpdate();
                    ps.close();
                    
                    noentrada+="El producto "+this.tabla3.getValueAt(i, 1).toString()+ " tiene el numero de entrada "+this.dbc.seleccionarid("select max(id) from inventario")+"\n";
                    

                    //quitar datos habilitar y deshabilitar
                }
                
                JOptionPane.showMessageDialog(null, "No entrada: \n\n"+noentrada);
                String[] id = this.cbopp.getSelectedItem().toString().split(" ");
                query="update opproveedores set idestatus = 2 where id = "+id[0];
                PreparedStatement ps= this.dbc.getCnx().prepareStatement(query);
                ps.executeUpdate();
                ps.close();

                //limpiar
                this.txtlotecompra.setText("");
                this.txtfactno.setText("");
                this.txtcantidadcompra.setText("");
                this.txtcapacidadcompra.setText("");
                this.txtfechaentrada.setText("");
                this.txtfecha1.setText("");
                this.txtidproveedor1.setText("");
                this.txtnombreproveedor1.setText("");
                this.cbproductosc.removeAllItems();
                this.tabla2.setRowCount(0);
                this.tabla3.setRowCount(0);
                
                //deshabilitar
                this.txtfecha1.setEnabled(false);
                this.txtlotecompra.setEnabled(false);
                this.txtfactno.setEnabled(false);
                this.txtcantidadcompra.setEnabled(false);
                this.txtcapacidadcompra.setEnabled(false);
                this.txtfechaentrada.setEnabled(false);
                this.txtcaducidad.setEnabled(false);
                this.btnAgregarproc.setEnabled(false);
                this.btnquitarproc.setEnabled(false);
                this.btnaceptarc.setEnabled(false);
                this.tabla2.setRowCount(0);
                this.tabla3.setRowCount(0);
                
                        
                        
                this.combo();
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Falta producto por agregar o error en la fecha");
            }

        }
        catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(null, "Error de conexion, intente otra vez");
            try {
                this.dbc = new DBcontrolador ();
            } catch (SQLException ex1) {
                Logger.getLogger(Movimientos.class.getName()).log(Level.SEVERE, null, ex1);
            }
           this.cnx=this.dbc.getCnx();
           
        }
    }//GEN-LAST:event_btnaceptarcActionPerformed

    private void btnquitarprocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnquitarprocActionPerformed
        int fila = this.tbproductosopp2.getSelectedRow();
        if (fila >= 0) {
            String nombre = this.tabla3.getValueAt(fila, 1).toString();
            double cantidad =Double.parseDouble(this.tabla3.getValueAt(fila, 2).toString());

            for (int i = 0; i < this.tabla2.getRowCount(); i++) {
                if(this.tabla2.getValueAt(i, 1).toString().compareTo(nombre)== 0)
                {
                    double c= Double.parseDouble(this.tabla2.getValueAt(i, 3).toString())+cantidad;
                    this.tabla2.setValueAt(c, i, 3);
                }
            }

            this.tabla3.removeRow(fila);
        }

    }//GEN-LAST:event_btnquitarprocActionPerformed

    private void btnAgregarprocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarprocActionPerformed

        if (this.txtlotecompra.getText().isEmpty() || this.txtfactno.getText().isEmpty() || this.txtcantidadcompra.getText().isEmpty()
            || this.txtcapacidadcompra.getText().isEmpty() || this.txtcaducidad.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Algun campo esta vacio");
        }
        else
        {
            if (this.txtcantidadcompra.getText().matches("^([0-9]+)(\\.[0-9]+)?$") && this.txtcapacidadcompra.getText().matches("^([0-9]+)(\\.[0-9]+)?$") && this.txtcaducidad.getText().matches("^[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{4}$"))  {
                double cantidadtotal=0;
                double punitario=0;
                int idproducto=0;
                int index=0;
                int cantidad = Integer.parseInt(this.txtcantidadcompra.getText());
                double capacidad = Double.parseDouble(this.txtcapacidadcompra.getText());
                String producto = this.cbproductosc.getSelectedItem().toString();
                for (int i = 0; i < this.tabla2.getRowCount(); i++) {
                    if(this.tabla2.getValueAt(i, 1).toString().compareTo(producto)== 0)
                    {
                        idproducto=Integer.parseInt(this.tabla2.getValueAt(i, 0).toString());
                        cantidadtotal=Double.parseDouble(this.tabla2.getValueAt(i, 3).toString());
                        punitario=Double.parseDouble(this.tabla2.getValueAt(i, 4).toString());
                        index=i;

                    }
                }

                if (cantidadtotal >=  cantidad*capacidad ) {
                    for (int i = 0; i < cantidad; i++) {
                        String[] c = new    String[6];
                        c[0]=idproducto+"";
                        c[1]=producto;
                        c[2]=capacidad+"";
                        c[3]=this.txtlotecompra.getText();
                        c[4]= (punitario * capacidad) +"";
                        c[5]= this.txtcaducidad.getText();
                        this.tabla3.addRow(c);
                    }
                    this.tabla2.setValueAt(cantidadtotal -  cantidad*capacidad, index, 3);
                }

                this.btnaceptarc.setEnabled(true);
                this.btnquitarproc.setEnabled(true);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Formato Incorrecto");
            }
        }

    }//GEN-LAST:event_btnAgregarprocActionPerformed

    
    //ODP
    private void btnaceptaroppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaceptaroppActionPerformed
        try{
            
            if (this.txtfecha.getText().matches("^[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{4}$") && this.tbproductosopp.getRowCount() > 0) {
                
                String respuesta = JOptionPane.showInputDialog(this, "Observaciones");
                String query="Insert into opproveedores(idpro,idmoneda,subtotal,iva,ptotal,idestatus,fecha,idcpago,observaciones) values (?,?,?,?,?,?,?,?,?)";
                PreparedStatement ps= this.dbc.getCnx().prepareStatement(query);
                double total=0;
                for (Double d : this.preciosopp) {
                    total+=d;
                }
                ps.setInt(1, Integer.parseInt(this.txtidproveedor.getText()) );
                ps.setInt(2, this.idmoneda);
                ps.setDouble(3, Math.round( total * 100.0 ) / 100.0);
                ps.setDouble(4, Math.round( (total*0.16) * 100.0 ) / 100.0);
                ps.setDouble(5, Math.round( (total*1.16) * 100.0 ) / 100.0);
                ps.setInt(6, 1);

                ps.setString(7, fechadividir(this.txtfecha,1));
                ps.setInt(8, this.cbcondicion_pago.getSelectedIndex()+1);
                ps.setString(9, respuesta);
                ps.executeUpdate();
                ps.close();

                query = "select MAX(id) from opproveedores";

                int index = Integer.parseInt(this.dbc.seleccionarid(query) );

                query ="Insert into pedidos_opp(idopp,idpro,punitario,ptotal,cantidad) values (?,?,?,?,?)";

                for (int i = 0; i < this.tabla.getRowCount(); i++) {

                    ps= this.dbc.getCnx().prepareStatement(query);
                    ps.setDouble(1, index);
                    ps.setInt(2, Integer.parseInt(this.tabla.getValueAt(i, 0).toString()));
                    ps.setDouble(3, Double.parseDouble(this.tabla.getValueAt(i, 6).toString()));
                    ps.setDouble(4, Double.parseDouble(this.tabla.getValueAt(i, 7).toString()));
                    ps.setDouble(5, Double.parseDouble(this.tabla.getValueAt(i, 4).toString()));

                    ps.executeUpdate();
                    ps.close();
                }
                //cantidad en letra
                String cantidad= (Math.round( (total*1.16) * 100.0 ) / 100.0)+"";
                System.out.println(cantidad);
                String[] divi =cantidad.split("\\.");
                n2t num = new n2t();
                System.out.println(divi[0]);
                String num_text =num.convertirLetras(Integer.parseInt(divi[0]));
                String moneda;
                if (this.idmoneda == 1) {
                    moneda="Moneda Nacional";
                }else
                {
                    moneda="USD";
                }
                num_text+=" "+divi[1]+"/100 "+moneda;
                
                
                JasperReport reporte; //Creo el objeto reporte
                // Ubicacion del Reporte
                String path = s+"\\Reportes\\Orden_Compra.jasper";
                try {

                   reporte = (JasperReport) JRLoader.loadObjectFromFile(path); //Cargo el reporte al objeto
                   Map opp = new HashMap();
                   opp.put("id", index);
                   opp.put("letra", num_text);
                   JasperPrint jprint = JasperFillManager.fillReport(path, opp, this.dbc.getCnx()); //Llenado del Reporte con Tres parametros ubicacion,parametros,conexion a la base de datos
                   JasperExportManager.exportReportToPdfFile(jprint, s+"\\ODC\\ODC-"+index+".pdf");
                   JasperViewer viewer = new JasperViewer(jprint,false); //Creamos la vista del Reporte
                   viewer.setDefaultCloseOperation(DISPOSE_ON_CLOSE); // Le agregamos que se cierre solo el reporte cuando lo cierre el usuario
                   viewer.setVisible(true); //Inicializamos la vista del Reporte

                } catch (Exception ex) {
                   Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (JOptionPane.showConfirmDialog(null, "¿Enviar correo ?", "Correo", JOptionPane.YES_NO_OPTION)==0) {
                    Properties props = new Properties();
                    props.setProperty("mail.smtp.host", "smtp.gmail.com");
                    props.setProperty("mail.smtp.starttls.enable", "true");
                    props.setProperty("mail.smtp.port","587");
                    props.setProperty("mail.smtp.user", "jams45072@gmail.com");
                    props.setProperty("mail.smtp.auth", "true");
                    Session session = Session.getDefaultInstance(props);

                    BodyPart texto = new MimeBodyPart();
                    texto.setText("Orden de compra no "+index);
                    BodyPart adjunto = new MimeBodyPart();
                    adjunto.setDataHandler(new DataHandler(new FileDataSource(s+"\\ODC\\ODC-"+index+".pdf")));
                    adjunto.setFileName("ODC.pdf");

                    MimeMultipart multiParte = new MimeMultipart();
                    multiParte.addBodyPart(texto);
                    multiParte.addBodyPart(adjunto);

                    System.out.println("aqui 2 ");
                    MimeMessage message = new MimeMessage(session);

                    message.setFrom(new InternetAddress("jams45072@gmail.com"));
                    message.addRecipient(Message.RecipientType.TO, new InternetAddress(this.correo));

                    message.setSubject("Prueba shida");
                    message.setContent(multiParte);

                    Transport t = session.getTransport("smtp");
                    t.connect("jams45072@gmail.com","jams45072ande5000");
                    t.sendMessage(message,message.getAllRecipients());
                    t.close();
                }
                
                this.tabla.setRowCount(0);
                this.btnAgregarpro.setEnabled(false);
                this.btnquitarpro.setEnabled(false);
                this.btnaceptaropp.setEnabled(false);

                this.txtidordenproveedores.setText("");
                this.txtfecha.setText("");
                this.txtnombreproveedor.setText("");
                this.txtidproveedor.setText("");

                this.preciosopp.clear();
                this.combo();

            }
            else
            {
                JOptionPane.showMessageDialog(null, "Error en la fecha");
            }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Error de conexion, intente otra vez"+ex);
            try {
                this.dbc = new DBcontrolador ();
            } catch (SQLException ex1) {
                Logger.getLogger(Movimientos.class.getName()).log(Level.SEVERE, null, ex1);
            }
           this.cnx=this.dbc.getCnx();
           
        }
    }//GEN-LAST:event_btnaceptaroppActionPerformed

    private void btnquitarproActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnquitarproActionPerformed
        try
        {
            if (this.tbproductosopp.getRowCount() != 0) {
                this.tabla.removeRow(this.columnaopp);
            }
            else
            {
                this.btnaceptaropp.setEnabled(false);
                this.btnquitarpro.setEnabled(false);
            }

        }
        catch(Exception ex)
        {
            
        }

    }//GEN-LAST:event_btnquitarproActionPerformed

    private void btnAgregarproActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarproActionPerformed
        try
        {

            Elegir_ProductoOPP productos = new Elegir_ProductoOPP (this,1);
            this.setEnabled(false);
            productos.setVisible(true);
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Error :"+ ex);
        }
    }//GEN-LAST:event_btnAgregarproActionPerformed

    private void tbproductosoppMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbproductosoppMouseClicked
        try
        {
            this.columnaopp=this.tbproductosopp.getSelectedRow();
        }
        catch(Exception ex)
        {

        }
    }//GEN-LAST:event_tbproductosoppMouseClicked

    private void btnElegirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnElegirActionPerformed
        try {
            Elegir_Proveedor pro = new Elegir_Proveedor(this,1);
            pro.setVisible(true);
            this.setEnabled(false);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error :"+ ex);
        }
    }//GEN-LAST:event_btnElegirActionPerformed

    
    //
    private void btnaceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaceptarActionPerformed
        try{
            boolean se=true;
            boolean fi=true;
            boolean mi=true;

            for (int i = 0; i < this.tbliberacionsensoriales.getRowCount(); i++) {
                 String res=this.tbliberacionsensoriales.getValueAt(i, 1).toString().toUpperCase();
                        if (res.isEmpty()) {
                            se=false;
                        }
            }

            for (int i = 0; i < this.tblieracionmicrobiologicas.getRowCount(); i++) {
                if (this.mi.get(i)[4].matches("^[0-9]+(.[0-9]+)?-[0-9]+(.[0-9]+)?$")) {
                    String[] c = this.mi.get(i)[4].split("-");
                    double n1=Double.parseDouble(c[0]);
                    double n2=Double.parseDouble(c[1]);
                    double res=Double.parseDouble(this.tblieracionmicrobiologicas.getValueAt(i, 1).toString());
                    if (res < n1|| res > n2) {
                        mi=false;
                    }
                }
                else
                {
                    if (this.mi.get(i)[4].matches("^>=?[0-9]+(.[0-9]+)?|<=?[0-9]+(.[0-9]+)?$")) {
                        String[] c = this.mi.get(i)[4].split("=");

                        double res=Double.parseDouble(this.tblieracionmicrobiologicas.getValueAt(i, 1).toString());
                        double n2=Double.parseDouble(c[1]);
                        if (c[0].compareTo("<")== 0) {
                            if (res > n2) {
                                mi=false;
                            }
                        }
                        else
                        {
                            if (res < n2) {
                                mi=false;
                            }
                        }
                    }
                    else
                    {
                        String res=this.tblieracionmicrobiologicas.getValueAt(i, 1).toString().toUpperCase();
                        if (res.compareTo(this.mi.get(i)[4].toUpperCase()) != 0) {
                            mi=false;
                        }
                    }
                }
            }

            for (int i = 0; i < this.tblieracionfisicoquimicas.getRowCount(); i++) {
                if (this.fi.get(i)[4].matches("^[0-9]+(.[0-9]+)?-[0-9]+(.[0-9]+)?$")) {
                    String[] c = this.fi.get(i)[4].split("-");
                    double n1=Double.parseDouble(c[0]);
                    double n2=Double.parseDouble(c[1]);
                    double res=Double.parseDouble(this.tblieracionfisicoquimicas.getValueAt(i, 1).toString());
                    if (res < n1|| res > n2) {
                        fi=false;
                    }
                }
                else
                {
                    if (this.fi.get(i)[4].matches("^>=?[0-9]+(.[0-9]+)?|<=?[0-9]+(.[0-9]+)?$")) {
                        String[] c = this.fi.get(i)[4].split("=");

                        double res=Double.parseDouble(this.tblieracionfisicoquimicas.getValueAt(i, 1).toString());
                        double n2=Double.parseDouble(c[1]);
                        if (c[0].compareTo("<")== 0) {
                            if (res > n2) {
                                fi=false;
                            }
                        }
                        else
                        {
                            if (res < n2) {
                                fi=false;
                            }
                        }
                    }
                    else
                    {
                        String res=this.tblieracionfisicoquimicas.getValueAt(i, 1).toString().toUpperCase();
                        if (res.compareTo(this.fi.get(i)[4].toUpperCase()) != 0) {
                            fi=false;
                        }
                    }
                }
            }

            if (se) {
                if (mi) {
                    if (fi && this.txtfechaliberacion.getText().matches("^[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{4}$")) {
                        String query="update ordenes_prod set estatus = 2, observaciones = '"+this.txtcomentarios.getText()+"' where id = "+ this.cbodp.getSelectedItem().toString();
                        this.dbc.operacion(query);
                        
                        query="insert into resultadosp_odp (idodp, idprueba, resultado) values (?,?,?)";
                        for (int i = 0; i < this.se.size(); i++) {
                            PreparedStatement ps= this.dbc.getCnx().prepareStatement(query); 

                            ps.setString(1, this.cbodp.getSelectedItem().toString());
                            ps.setString(2, this.se.get(i)[0]);
                            ps.setString(3, this.sensoriales.getValueAt(i, 1).toString());

                            ps.executeUpdate();
                            ps.close();
                        }
                        
                        for (int i = 0; i < this.mi.size(); i++) {
                            PreparedStatement ps= this.dbc.getCnx().prepareStatement(query); 

                            ps.setString(1, this.cbodp.getSelectedItem().toString());
                            ps.setString(2, this.mi.get(i)[0]);
                            ps.setString(3, this.micro.getValueAt(i, 1).toString());

                            ps.executeUpdate();
                            ps.close();
                        }
                         
                        for (int i = 0; i < this.fi.size(); i++) {
                            PreparedStatement ps= this.dbc.getCnx().prepareStatement(query); 

                            ps.setString(1, this.cbodp.getSelectedItem().toString());
                            ps.setString(2, this.fi.get(i)[0]);
                            ps.setString(3, this.fisico.getValueAt(i, 1).toString());

                            ps.executeUpdate();
                            ps.close();
                        }
                        
                        //insertar pt en inventario
                        query="insert into inventario(idproducto, fechaentrada, cantidadactual,lote, idopp,facturano, cantidad,costo,fechacaducidad) values (?,?,?,?,?,?,?,?,?)";
                        PreparedStatement ps= this.dbc.getCnx().prepareStatement(query); 
                        ps.setString(1, this.txtproductoidliberacion.getText());
                        ps.setString(2, this.fechadividir(this.txtfechaliberacion.getText(), 1) );
                        String q2 =this.dbc.seleccionarid("select cantidad from ordenes_prod where id = "+this.cbodp.getSelectedItem().toString());
                        ps.setString(3, q2);
                        ps.setString(4, this.cbodp.getSelectedItem().toString());
                        ps.setString(5, this.cbodp.getSelectedItem().toString());
                        ps.setString(6, this.cbodp.getSelectedItem().toString());
                        ps.setString(7, q2);
                        String q3 =this.dbc.seleccionarid("select sum(costo) from mp_odp where idodp = "+this.cbodp.getSelectedItem().toString());
                        ps.setString(8, q3);
                        String q4 =this.dbc.seleccionarid("select mesescaducidad from productos where id = "+this.txtproductoidliberacion.getText());
                        LocalDate dt =  LocalDate.parse(this.fechadividir(this.txtfechaliberacion.getText(), 1)).plusMonths(Integer.parseInt(q4));
                        ps.setString(9, dt.getYear()+"-"+dt.getMonthValue()+"-"+dt.getDayOfMonth());
                        ps.executeUpdate();
                        ps.close();
                        
                        this.sensoriales.setRowCount(0);
                        this.micro.setRowCount(0);
                        this.fisico.setRowCount(0);
        
                        this.txtcomentarios.setText("");
                        this.txtproductoidliberacion.setText("");
                        this.txtproductoliberacion.setText("");
                        this.txtfechaliberacion.setText("");
                        this.btnaceptar.setEnabled(false);
                         
                        
                        
                        
                        JasperReport reporte; //Creo el objeto reporte
                        // Ubicacion del Reporte
                       String path = s+"\\Reportes\\Liberacion_ODP.jasper";
                       try {
                           reporte = (JasperReport) JRLoader.loadObjectFromFile(path); //Cargo el reporte al objeto
                           Map id = new HashMap();
                           id.put("ID_Inven", this.dbc.seleccionarid("select max(id) from inventario"));
                           JasperPrint jprint = JasperFillManager.fillReport(path, id, this.dbc.getCnx()); //Llenado del Reporte con Tres parametros ubicacion,parametros,conexion a la base de datos
                           File d = new File(s+"\\Liberacion");
                           File pdf = File.createTempFile("Liberacion-"+this.cbodp.getSelectedItem().toString()+"--", ".pdf",d);
                           JasperExportManager.exportReportToPdfStream(jprint, new FileOutputStream(pdf));
                           JasperViewer viewer = new JasperViewer(jprint,false); //Creamos la vista del Reporte
                           viewer.setDefaultCloseOperation(DISPOSE_ON_CLOSE); // Le agregamos que se cierre solo el reporte cuando lo cierre el usuario
                           viewer.setVisible(true); //Inicializamos la vista del Reporte
                           
                       } catch (Exception ex) {
                           Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                       }
                        
                        combo();
                        comboliberacion();
             
                        
                        
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Valores incorrectos en pruebas Fisicoquimicas");
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Valores incorrectos en pruebas Microbiologicas");
                }

            }
            else
            {
                JOptionPane.showMessageDialog(null, "Valores incorrectos en pruebas Sensoriales");
            }
        
        }
        catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(null, "Error de conexion, intente otra vez");
            try {
                this.dbc = new DBcontrolador ();
            } catch (SQLException ex1) {
                Logger.getLogger(Movimientos.class.getName()).log(Level.SEVERE, null, ex1);
            }
           this.cnx=this.dbc.getCnx();
           
        }
        
        
    }//GEN-LAST:event_btnaceptarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Movimientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Movimientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Movimientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Movimientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Compra;
    private javax.swing.JPanel LOP;
    private javax.swing.JPanel OPC;
    private javax.swing.JPanel OPP;
    private javax.swing.JButton btnAgregarpro;
    private javax.swing.JButton btnAgregarpro1;
    private javax.swing.JButton btnAgregarproc;
    private javax.swing.JButton btnElegir;
    private javax.swing.JButton btnElegir1;
    private javax.swing.JButton btnaceptar;
    private javax.swing.JButton btnaceptarc;
    private javax.swing.JButton btnaceptaropp;
    private javax.swing.JButton btnaceptaropp1;
    private javax.swing.JButton btnquitarpro;
    private javax.swing.JButton btnquitarpro1;
    private javax.swing.JButton btnquitarproc;
    private javax.swing.JComboBox<String> cbcondicion_pago;
    private javax.swing.JComboBox<String> cbodp;
    private javax.swing.JComboBox<String> cbopp;
    private javax.swing.JComboBox<String> cbproductosc;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable tbliberacionsensoriales;
    private javax.swing.JTable tblieracionfisicoquimicas;
    private javax.swing.JTable tblieracionmicrobiologicas;
    private javax.swing.JTable tbopc;
    private javax.swing.JTable tbproductosopp;
    private javax.swing.JTable tbproductosopp1;
    private javax.swing.JTable tbproductosopp2;
    private javax.swing.JTextField txtcaducidad;
    private javax.swing.JTextField txtcantidadcompra;
    private javax.swing.JTextField txtcapacidadcompra;
    private javax.swing.JTextArea txtcomentarios;
    private javax.swing.JTextField txtfactno;
    private javax.swing.JTextField txtfecha;
    private javax.swing.JTextField txtfecha1;
    private javax.swing.JTextField txtfechaentrada;
    private javax.swing.JTextField txtfechaliberacion;
    private javax.swing.JTextField txtfechaopc;
    private javax.swing.JTextField txtidclienteopc;
    private javax.swing.JTextField txtidopc;
    private javax.swing.JTextField txtidordenproveedores;
    private javax.swing.JTextField txtidproveedor;
    private javax.swing.JTextField txtidproveedor1;
    private javax.swing.JTextField txtlotecompra;
    private javax.swing.JTextField txtnombrecliente;
    private javax.swing.JTextField txtnombreproveedor;
    private javax.swing.JTextField txtnombreproveedor1;
    private javax.swing.JTextField txtproductoidliberacion;
    private javax.swing.JTextField txtproductoliberacion;
    // End of variables declaration//GEN-END:variables
}
